Shader "Scatterer/VolumeDepth"
{
	Properties
	{

	}
	SubShader
	{
		Tags { "RenderType"="Opaque" }
		LOD 100


		Pass
		{

			Cull Off

			ZWrite Off
			ZTest Always
			Blend One One

//			Blend SrcAlpha OneMinusSrcAlpha

			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#pragma hull hull
			#pragma domain domain

			#include "UnityCG.cginc"
			#include "UnityShadowLibrary.cginc"
			#include "ShadowVolumeUtils.cginc"

			#pragma multi_compile DUAL_DEPTH_OFF DUAL_DEPTH_ON

			sampler2D _ShadowMapTextureCopyScatterer;
			sampler2D _CameraDepthTexture;
			float4x4 CameraToWorld;

#if defined(DUAL_DEPTH_ON)
			UNITY_DECLARE_DEPTH_TEXTURE(AdditionalDepthBuffer);
			float4x4  ScattererAdditionalInvProjection;
#endif

			StructuredBuffer<float4x4> inverseShadowMatricesBuffer;

			float4x4 lightToWorld;


			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2t //vertex 2 tesselation
			{
				float4 pos : INTERNALTESSPOS;
				float4 worldOriginPos : TEXCOORD0;
				float4 worldEndPos : TEXCOORD1;
			};

			struct d2f //domain 2 frag
			{
				float4 pos : SV_POSITION;
				float3 outputColor: TEXCOORD0;
				float4 viewPos: TEXCOORD1;
				float4 projPos : TEXCOORD2;
				float displacedPatch : TEXCOORD3;
			};

			v2t vert (appdata v)
			{
				v2t o;

				//o.pos = float4(2.0*(v.uv-0.5),0.0,1.0); //try modifying this, clip space goes from -1 to 1, our UVs go from?to?
				//o.pos = float4(2.5*(v.uv-0.5),0.0,1.0);
				o.pos = float4(3.0*(v.uv-0.5),0.0,1.0); //HOLY FUCK THIS FIXES THE DISAPPEARING CHUNKS WHAT THE FUCK, so there was some weird boundary issue, also 10 KM WORKS WELL, 50 KM has glitches, 35 KM also has glitches
									//20 KM also still has glitches what the fuck??

				o.worldOriginPos = mul(lightToWorld,o.pos);
				o.worldEndPos = mul(lightToWorld,float4(o.pos.x,o.pos.y,10.0,1.0));
				//o.worldEndPos = mul(lightToWorld,float4(0.5,0.5,10.0,1.0)); //eliminates box issue but causes holes
				//o.worldEndPos = mul(lightToWorld,float4(o.pos.x,o.pos.y,100.0,1.0));
				//o.worldEndPos = mul(lightToWorld,float4(o.pos.x,o.pos.y,10000.0,1.0));

				return o;
			}

			struct OutputPatchConstant
			{
				float edge[3]: SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			OutputPatchConstant constantsFixed(InputPatch<v2t,3> patch)
			{
				OutputPatchConstant o;

//				bool isVisible = false;
//
//				for (int i=0;i<3;i++)
//				{
//					float4 clipSpaceOrigin = mul(UNITY_MATRIX_VP, patch[i].worldOriginPos);
//					float4 clipSpaceEnd    = mul(UNITY_MATRIX_VP, patch[i].worldEndPos);
//					isVisible = isVisible || intersectsFrustum(clipSpaceOrigin.xyz/clipSpaceOrigin.w, clipSpaceEnd.xyz/clipSpaceEnd.w); //consider this to be working though I'm not sure, maybe pass a color?
//				}
//
//				if (!isVisible)
//				{
//					o.edge[0] = 0.0;
//					o.edge[1] = 0.0;
//					o.edge[2] = 0.0;
//					o.inside = 0.0;
//				}
//				else
				{
//					//this was really complicated to get working, and although I'm not completely sure about it, it has less holes than my cascade method
					float3 lightDir = normalize(_WorldSpaceLightPos0.xyz);
					float maxTesselationFactor = 64.0;

					float distEdge0 = rayDistanceToPoint(0.5*(patch[1].worldOriginPos+patch[2].worldOriginPos), lightDir, _WorldSpaceCameraPos);
					float distEdge1 = rayDistanceToPoint(0.5*(patch[2].worldOriginPos+patch[0].worldOriginPos), lightDir, _WorldSpaceCameraPos);
					float distEdge2 = rayDistanceToPoint(0.5*(patch[0].worldOriginPos+patch[1].worldOriginPos), lightDir, _WorldSpaceCameraPos);
//
////					float factor0 = clamp(maxTesselationFactor * 25.0 / distEdge0,1.0,maxTesselationFactor);
////					float factor1 = clamp(maxTesselationFactor * 25.0 / distEdge1,1.0,maxTesselationFactor);
////					float factor2 = clamp(maxTesselationFactor * 25.0 / distEdge2,1.0,maxTesselationFactor);
//
					float factor0 = clamp(maxTesselationFactor * 225.0 / distEdge0,1.0,maxTesselationFactor);
					float factor1 = clamp(maxTesselationFactor * 225.0 / distEdge1,1.0,maxTesselationFactor);
					float factor2 = clamp(maxTesselationFactor * 225.0 / distEdge2,1.0,maxTesselationFactor);

					//float insideFactor = max(factor0, max(factor1,factor2)); //doesn't seem to be always correct, so try to think about it, think about what causes cracks in this case, it's normal, every triangle's max isn't necessarily the adjacent triangle's max

					o.edge[0] = factor0;
					o.edge[1] = factor1;
					o.edge[2] = factor2;
					o.inside  = (factor0 + factor1 + factor2) / 3.0;  //doesn't seem to be always correct, so try to think about it, think about what causes cracks in this case, it's normal, every triangle's max isn't necessarily the adjacent triangle's max

//					o.edge[0] = 16;
//					o.edge[1] = 16;
//					o.edge[2] = 16;
//					o.inside  = 16;  //doesn't seem to be always correct, so try to think about it, think about what causes cracks in this case, it's normal, every triangle's max isn't necessarily the adjacent triangle's max

//					o.edge[0] = 1;
//					o.edge[1] = 1;
//					o.edge[2] = 1;
//					o.inside  = 1;  //doesn't seem to be always correct, so try to think about it, think about what causes cracks in this case, it's normal, every triangle's max isn't necessarily the adjacent triangle's max

				}

				return o;
			}

			[domain("tri")]
			[partitioning("integer")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("constantsFixed")]
			[outputcontrolpoints(3)]
			v2t hull(InputPatch<v2t,3> patch, uint id : SV_OutputControlPointID)
			{
				return patch[id];
			}


			inline bool between(float a, float b, float x)
			{
				return (x > a) && (x < b);
			}

			//cascadeWeights -> 0,1,2,3 -> zero is the most detailed -> 3 is the least detailed
			//0 is in lower left corner, 1 in lower right corner, 2 in upper left corner, 3 in upper right corner, in the case of regular cascades no split spheres, not sure about splitSpheres
			//Still need to check the shadowMap for each cascade though to make sure we have a depth value at that coordinate
			inline fixed pickMostDetailedCascade(float4 wpos, out float4 shadowPos, sampler2D shadowMap)
			{
				float3 coords0 = mul (unity_WorldToShadow[0], wpos).xyz;
				float3 coords1 = mul (unity_WorldToShadow[1], wpos).xyz;
				float3 coords2 = mul (unity_WorldToShadow[2], wpos).xyz;
				float3 coords3 = mul (unity_WorldToShadow[3], wpos).xyz;

				float zdepth = 0;
				shadowPos = 0;

				if (between(0.0, 0.5, coords0.x) &&  between(0.0, 0.5, coords0.y) && ((zdepth = tex2Dlod(shadowMap, float4(coords0.xy,0.0,0.0)).r) > 0.0 ) && (zdepth<1.0))
				{
					shadowPos = float4(coords0.xy, zdepth, 1.0);
					return 0;
				}
				else if (between(0.5, 1.0, coords1.x) && between(0.0, 0.5, coords1.y) && ((zdepth = tex2Dlod(shadowMap, float4(coords1.xy,0.0,0.0)).r) > 0.0) && (zdepth<1.0))
				{
					shadowPos = float4(coords1.xy, zdepth, 1.0);
					return 1;
				}
				else if (between(0.0, 0.5, coords2.x) && between(0.5, 1.0, coords2.y) && ((zdepth = tex2Dlod(shadowMap, float4(coords2.xy,0.0,0.0)).r) > 0.0) && (zdepth<1.0))
				{
					shadowPos = float4(coords2.xy, zdepth, 1.0);
					return 2;
				}
				else if (between(0.5, 1.0, coords3.x) && between(0.5, 1.0, coords3.y) && ((zdepth = tex2Dlod(shadowMap, float4(coords3.xy,0.0,0.0)).r) > 0.0) && (zdepth<1.0))
				{
					shadowPos = float4(coords3.xy, zdepth, 1.0);
					return 3;
				}
				else
				{
					return -1;
				}
			}

			[domain("tri")]
			d2f domain(OutputPatchConstant tessFactors,const OutputPatch<v2t,3> vs, float3 d:SV_DomainLocation)
			{
				d2f o;
				float3 worldPos = vs[0].worldOriginPos.xyz/vs[0].worldOriginPos.w * d.x + vs[1].worldOriginPos.xyz/vs[1].worldOriginPos.w * d.y + vs[2].worldOriginPos.xyz/vs[2].worldOriginPos.w * d.z;

				float4 finalWorldPos = 0;
				float4 shadowPos = 0;
				fixed cascadeIndex = pickMostDetailedCascade (float4(worldPos,1.0), shadowPos, _ShadowMapTextureCopyScatterer);		//only support 4 cascades here

				float4x4 shadowToWorld = inverseShadowMatricesBuffer[max(cascadeIndex,0)];
				//finalWorldPos = (cascadeIndex > -1) ? mul( shadowToWorld, shadowPos) : float4(worldPos.xyz - 750000.0 * normalize(_WorldSpaceLightPos0.xyz), 1.0);
				//finalWorldPos = (cascadeIndex > -1) ? mul( shadowToWorld, shadowPos) : float4(_WorldSpaceCameraPos.xyz - 100000.0 * normalize(_WorldSpaceLightPos0.xyz), 1.0); //eliminates the glitchy square thing
				//finalWorldPos = (cascadeIndex > -1) ? mul( shadowToWorld, shadowPos) : float4(_WorldSpaceCameraPos.xyz - 700000.0 * normalize(_WorldSpaceLightPos0.xyz), 1.0); //still has holes although it seems to project to infinity
				o.displacedPatch=1.0;

				finalWorldPos = mul( shadowToWorld, shadowPos);
				if (cascadeIndex < 0.0)
				{
//					float3 coords3 = mul (unity_WorldToShadow[3], float4(worldPos,1.0)).xyz;
//					//float4 madeUpShadowPos = float4( coords3.xy, 10.0, 1.0);
//					float4 madeUpShadowPos = float4( 0.75,0.75, 10000.0, 1.0);
					float3 worldEndPos = vs[0].worldEndPos.xyz/vs[0].worldEndPos.w * d.x + vs[1].worldEndPos.xyz/vs[1].worldEndPos.w * d.y + vs[2].worldEndPos.xyz/vs[2].worldEndPos.w * d.z; //ideally we would project this to our far plane and tag it as undisplaced
					//worldEndPos-= 100000.0 * normalize(_WorldSpaceLightPos0.xyz);
					finalWorldPos = float4(worldEndPos,1.0);
					//finalWorldPos = float4(worldPos,1.0);
					o.displacedPatch = 0.0;
				}

				//maybe project by the final cascade and a made up depth anyway?

				//color debugging stuff
				o.outputColor = float3(cascadeIndex == 0, cascadeIndex == 1, cascadeIndex ==2);
				o.outputColor =  (cascadeIndex == -1) ? 0 :  ((cascadeIndex == 3) ? 1.0 : o.outputColor );

				o.pos=UnityWorldToClipPos(finalWorldPos);
				//o.pos=UnityWorldToClipPos(worldPos);
				o.viewPos = float4(UnityWorldToViewPos(finalWorldPos),1.0);
				o.projPos = ComputeScreenPos(o.pos);
				return o;
			}


			float4 frag (d2f i, fixed facing : VFACE) : SV_Target
			{
				float2 depthUV = i.projPos.xy/i.projPos.w;
				float zdepth = tex2Dlod(_CameraDepthTexture, float4(depthUV,0,0));

#ifdef SHADER_API_D3D11  //#if defined(UNITY_REVERSED_Z)
				zdepth = 1 - zdepth;
#endif

				float4 depthClipPos = float4(depthUV, zdepth, 1.0);
				depthClipPos.xyz = 2.0f * depthClipPos.xyz - 1.0f;
				float4 depthViewPos = mul(unity_CameraInvProjection, depthClipPos);

				float depthLength = length(depthViewPos.xyz/depthViewPos.w);
//#if defined(DUAL_DEPTH_ON)
//				zdepth = SAMPLE_DEPTH_TEXTURE(AdditionalDepthBuffer, depthUV);
//
//#ifdef SHADER_API_D3D11  //#if defined(UNITY_REVERSED_Z)
//				zdepth = 1 - zdepth;
//#endif
//				depthClipPos = float4(depthUV, zdepth, 1.0);
//				depthClipPos.xyz = 2.0f * depthClipPos.xyz - 1.0f;
//				float4 depthViewPos2 = mul(ScattererAdditionalInvProjection, depthClipPos);
//
//				depthLength = (depthLength < 8000) || (depthLength > 50000) ? depthLength : length(depthViewPos2.xyz/depthViewPos2.w); //the 50000 is hardcoded shadow distance, hopefully we don't even need this crap
//#endif

				float viewLength = length(i.viewPos.xyz/i.viewPos.w);
				//viewLength = (zdepth > 0.0) ? min(viewLength, depthLength) : viewLength;

				//viewLength = (zdepth > 0.0) ? min(viewLength, depthLength) : viewLength; //this is for the sky
				//viewLength = min(viewLength, depthLength);

				if (viewLength>depthLength) //discard what is behind terrain, will probably not work for clouds?
					viewLength = 0.0;

//				if (i.displacedPatch == 0.0) //not working with a factor of 3
//					viewLength = 0.0;

//				return facing > 0 ? viewLength : -viewLength;


//				float cameraDepth = abs(i.viewPos.z/i.viewPos.w) / 750000;
//
//				if (cameraDepth >= 0.9)
//				{
//					viewLength = 0.0;
//					//return float4(0.0,0.0,0.0,0.0);
//				}

				return facing > 0 ? viewLength : -viewLength;

				//return float4(cameraDepth,cameraDepth,cameraDepth,1.0); //reaches nearly white on that goddamn square, why isn't it clipped?

//				return facing > 0 ? float4(0.0,1.0,0.0,1.0) :  float4(1.0,0.0,0.0,1.0);
				//return i.displacedPatch > 0.0 ? float4(1.0,1.0,1.0,1.0) : float4(1.0,0.0,0.0,1.0);
				//return float4(i.outputColor,1.0);

			}
			ENDCG
		}
	}
}